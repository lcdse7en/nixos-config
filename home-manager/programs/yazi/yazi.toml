[manager]
layout         = [1, 4, 3]
# sort_by = "natural"
# sort_by = "modified"
sort_by = "alphabetical"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
linemode       = "size"
show_hidden    = false
show_symlink   = false
scrolloff      = 5

[preview]
tab_size = 2
max_width = 26000
max_height = 29000
cache_dir = ""
image_filter    = "triangle"
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[settings]
# Enable ueberzug/chafa for image previews
ueberzug = true
chafa = true
debug = true

# Scale factor for image rendering
ueberzug_scale = 0.5  # Adjust this value based on your display scaling
# Offset for image rendering
ueberzug_offset = [0.5, 0.5, -0.5, -0.5]  # Adjust these values based on testing
# Max width and height for image previews
max_width = 80  # Set according to your terminal size
max_height = 24

[opener] # sets of definitions of openers referenced in rules below
folder = [
    { run = 'hyprctl dispatch exec "[float; size 60% 60%; center 1] xdg-open" "$@"', desc = "Open in GUI File Manager" },
    { run = '$EDITOR "$@"' },
]
edit = [
    { run = '${EDITOR:=nvim} "$@"', desc = "Default Editor ($EDITOR)", block = true, for = "unix" },

    { run = 'nvim "$@"', desc = "Neovim (Linux)", block = true, for = "unix" },
    { run = 'vim "$@"', desc = "Vim (Linux)", block = true, for = "unix" },
    { run = 'lvim "$@"', desc = "Lunarvim (Linux)", block = true, for = "unix" },
    { run = 'hx "$@"', desc = "Helix (Linux)", block = true, for = "unix" },

    { run = 'wsl.exe /mnt/c/Users/charl/AppData/Local/Programs/Microsoft\\ VS\\ Code/bin/code --wait "$@"', desc = "VSCode (WSL)", block = true, for = "unix" },
    { run = 'code.exe "$@"', desc = "VSCode (Windows)", block = true, for = "windows" },
    { run = 'code.exe --wait "$@"', desc = "VSCode (Block, Windows)", block = true, for = "windows" },
]

open = [
    { run = 'xdg-open "$@"',                desc = "Open", for = "linux" },
    { run = 'open "$@"',                    desc = "Open", for = "macos" },
	  { run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]

reveal = [
    { run = 'xdg-open "$(dirname "$0")"',            desc = "Reveal", for = "linux" },
    { run = 'open -R "$1"',                          desc = "Reveal", for = "macos" },
    { run = 'explorer /select, "%1"', orphan = true, desc = "Reveal", for = "windows" },
    { run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]

extract = [
    { run = 'unar "$1"', desc = "Extract here", for = "unix" },
    { run = 'unar "%1"', desc = "Extract here", for = "windows" },
]

play = [
    { run = 'mpv -force-window "$@"', orphan = true, for = "unix" },
    { run = 'mpv "%1"',               orphan = true, for = "windows" },
    { run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
    { run = 'iina --no-stdin "$@"' },
	  { run = '''mediainfo "$1"; echo "Press enter to exit"; read''', block = true, desc = "Show media info", for = "unix" },
    { run = 'mpv "%1"', orphan = true, for = "windows" },
]

imgedit = [
    { run = 'nsxiv "$@"', desc = "nsxiv", orphan = false },
    { run = 'feh "$@"', desc = "feh", orphan = false },
]

pdfedit = [
    { run = 'zathura "$@"', desc = "Zathura", orphan = false },
    { run = 'okular "$@"', desc = "Okular", orphan = false },
    { run = 'evince "$@"', desc = "Evince", orphan = false },
    { run = 'pdfarranger "$@"', desc = "PDF Arranger", orphan = false },
]

mdedit = [
    { run = 'nvim "$@"', desc = "nvim", block = true },
    { run = 'typora "$@"', desc = "typora", block = true },
    { run = 'geany "$@"', desc = "geany", block = true },
    { run = 'gvim "$@"', desc = "gvim", block = true },
    { run = 'vim "$@"', desc = "vim", block = true },
    { run = 'meld "$@"', desc = "meld", block = true },
]

[open] #rules for which opener(s) for which filetypes
rules = [
    { name = "*/", use = [ "edit", "open", "reveal", ] },
    { mime = "text/*",  use = [ "edit", "reveal" ] },
    { mime = "image/*", use = ["imgedit", "reveal"] },
    { mime = "{audio,video}/*", use = [ "play", "reveal",] },
    { mime = "inode/x-empty", use = [
		    "edit",
		    "reveal",
	  ] },
    { mime = "application/*zip", use = [
		    "extract",
		    "reveal",
	  ] },
	  { mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [
		    "extract",
		    "reveal",
	  ] },
    { mime = "application/json", use = [
		    "edit",
		    "reveal",
	  ] },
	  { mime = "*/javascript", use = [
		    "edit",
		    "reveal",
	  ] },

	  { mime = "*", use = [
		    "open",
		    "reveal",
	  ] },
    # { name = ".mp4", use = [ "mp4edit", "reveal" ] },
    # { name = ".m4a", use = [ "mp4edit", "reveal" ] },
    { name = ".conf", use = [ "edit", "reveal" ] },
    { name = ".md", use = [ "mdedit", "reveal" ] },
    { name = "*.aup3", use = [ "aup3edit", "reveal" ] },

    { mime = "text/docx", use = "docx" },
    # { mime = "video/*", use = "video" },
    # { mime = "audio/*", use = "audio" },

    { mime = "text/xlsx", use = "xlsx" },
    { mime = "application/pdf",             use = [ "pdfedit" ] },

    { mime = "application/zip",             use = [ "extract" ] },
    { mime = "application/gzip",            use = [ "extract" ] },
    { mime = "application/xz",              use = [ "extract" ] },

]

[tasks]
micro_workers = 10
macro_workers = 25
bizarre_retry = 5
image_alloc = 536870912 # 512MB
image_bound = [0, 0]
suppress_preload = false

[plugin]

preloaders = [
    { name = "*", cond = "!mime", run = "mime", multi = true, prio = "high" },
    # Image
    { mime = "image/*", run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
]

prepend_previewers = [
    { mine = "audio/*", exec = "exifaudio" },
    { name = ".md", run = "glow" },
    { mime = "audio/*", run = "exifaudio" },
    { name = "video/*", run = "ffmpegthumbnailer" },
    { name = ".svg", run = "magick" },
    { name = ".xlsx", run = "xlsx" },
    { name = ".xls", run = "xls" },
]

previewers = [
    { name = "*/", run = "folder", sync = true },
    # Code
    { mime = "text/*", run = "code" },
    { mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
    # JSON
    { mime = "application/json", run = "json" },
    # Image
    { mime = "image/vnd.djvu", run = "noop" },
    { mime = "image/*",        run = "image" },
    # Video
    { mime = "video/*", run = "video" },
    # PDF
    { mime = "application/pdf", run = "pdf" },
    # Archive
    { mime = "application/*zip", run = "archive" },
    { mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", run = "archive" },
    # Fallback
    { name = "*", run = "file" },
]

[input]
# cd
cd_title = "Change directory:"
cd_origin = "top-center"
cd_offset = [0, 2, 50, 3]

# create
create_title = "Create:"
create_origin = "top-center"
create_offset = [0, 2, 50, 3]

# rename
rename_title = "Rename:"
rename_origin = "hovered"
rename_offset = [0, 1, 50, 3]

# trash
trash_title = "Move {n} selected file{s} to trash? (y/N)"
trash_origin = "top-center"
trash_offset = [0, 2, 50, 3]

# delete
delete_title = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin = "top-center"
delete_offset = [0, 2, 50, 3]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [0, 2, 50, 3]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [0, 2, 50, 3]

# overwrite
overwrite_title = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [0, 2, 50, 3]

# quit
quit_title = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [0, 2, 50, 3]

[select]
open_title = "Open with:"
open_origin = "hovered"
open_offset = [0, 1, 50, 7]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false

[log]
enabled = false

[headsup]
disable_exec_warn = true

[plugins]
preload = ["~/.config/yazi/ui.lua", "~/.config/yazi/symlink.lua"]
# preload = ["~/.config/yazi/hide_statusbar.lua"]
